use diff -u in the command line to compare 2 files
git is named after English slang git !!

git saves manually
in git terminology, user-created checkpoints are called commits
a repository contains a single file or a collection of files
a commit is a snapshot of every file in your repository when the commit is submitted 

to see colored output in git do this:
git config --global color.ui auto


clone
log
diff
checkout

checking out to a commit means resetting all your files to the state they were in when the commit was made

git configuration info is in the instructor’s notes here:
https://www.udacity.com/course/viewer#!/c-ud775/l-2980038599/m-3333158951

Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare. 


Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy. 


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore. 


Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.

Git repositories
================

git files are stored in .git directory

git init — initializes git in an existing directory

git status — shows which files have changed since the last commit

git add — adds a file to the staging area (list of files to be committed)

Git commits
===========

Good practice to write commit messages as a command, for example:

“Add a recipe for strawberry cheesecake”

git commit — commits the changes (from the staging the area)

git diff — with no args compares files in working directory to staging area

git diff —- staged

runs the diff between files in the staging area and files in the repository (already committed)

git reset —- hard

discards changes in the staging area and the working directory BE CAREFUL WITH THIS

Branches
=========
A branch is a label for a commit

master is the main branch

every time you create a repository, git creates a master branch for you

“detached head” message means you’re looking at a commit that is not labelled with a branch name

making a new commit updates the branch you have checked out, and leaves all others alone

the process of combining two commits is known a merging, for example, you added an experimental feature in the exp branch, and now want to combine it back into the master branch

git branch  — (no args) shows and views branches

git branch branch1 — creates a new branch with that name

The star next to the branch is the one that is currently checked out, so that’s the one that will update if I make a change

To switch to a different branch:
git checkout branch1

To commit changes to a branch
git add file — to add to staging area
git commit — to commit changes

BRANCH1
